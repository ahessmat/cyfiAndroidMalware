package cfg;

import cfg.visual.AndroidCallGraphFilter;
import cfg.visual.Visualizer;
import cfg.android.AndroidUtil;

import java.io.File;
import java.util.Iterator;
import java.util.HashSet;
import java.util.Set;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;

import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;
import org.graphstream.graph.implementations.SingleGraph;
import org.graphstream.ui.view.Viewer;
import org.graphstream.ui.view.View;
import org.graphstream.ui.view.ViewerPipe;
import org.graphstream.ui.view.ViewerListener;

import soot.options.Options;
import soot.Scene;
import soot.SootClass;
import soot.SootMethod;
import soot.jimple.infoflow.InfoflowConfiguration;
import soot.jimple.infoflow.android.InfoflowAndroidConfiguration;
import soot.jimple.infoflow.android.SetupApplication;
import soot.jimple.toolkits.callgraph.CallGraph;
import soot.jimple.toolkits.callgraph.Edge;

public class BasicAPKAnalysis {

    public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println("Usage: java BasicAPKAnalysis <APK_FILE_PATH>");
            System.exit(1);
        }

        //Creating a set of network syscalls/APIs to be mindful of
        Set<String> syscalls = new HashSet<>();
        syscalls.add("java.net.HttpURLConnection "); //we're mindful of the trailing space, lest we incur this as a parameter also
        syscalls.add("getConnectivityStatus("); //used in skygofree to determine WIFI (1) or MOBILE (0) connection, returns int
        syscalls.add("newCall"); //skygofree: derived from OkHttpClient
        syscalls.add("wifiManageConfiguration"); //skygofree wifi

        // Set the classpath and other options for Soot
        Options.v().set_prepend_classpath(true);
        Options.v().set_allow_phantom_refs(true);
        Options.v().set_output_format(Options.output_format_none);

        // Load the APK file into Soot's Scene
        String apkPath = args[0];
        String androidHome = System.getenv("ANDROID_HOME");
        if (androidHome == null){
            System.out.println("ANDROID_HOME not set");
            System.exit(1);
        }
        String androidJar = androidHome + "/platforms";

        InfoflowConfiguration.CallgraphAlgorithm cgAlgorithm = InfoflowConfiguration.CallgraphAlgorithm.SPARK;
        final InfoflowAndroidConfiguration config = AndroidUtil.getFlowDroidConfig(apkPath, androidJar, cgAlgorithm);
        SetupApplication app = new SetupApplication(config);
        app.constructCallgraph();
        CallGraph callGraph = Scene.v().getCallGraph();

        Graph graph = new SingleGraph("Call Graph");
        Set<String> methodMap = new HashSet<>();
        Set<String> edgeMap = new HashSet<>();
        Set<String> calls = new HashSet<>();

        for (Edge edge : callGraph){
            String srcMethod = edge.getSrc().method().getSignature();
            String tgtMethod = edge.getTgt().method().getSignature();

            // Add nodes if they don't exist in the graph
            if (!methodMap.contains(srcMethod)){
                Node n = graph.addNode(srcMethod);
                n.setAttribute("ui.label", srcMethod);
                methodMap.add(srcMethod);
            }
            if (!methodMap.contains(tgtMethod)){
                Node n = graph.addNode(tgtMethod);
                n.setAttribute("ui.label", tgtMethod);
                methodMap.add(tgtMethod);
            }
            // Add the edge to the graph
            String new_edge = srcMethod + "_" + tgtMethod;
            if (!edgeMap.contains(new_edge)){
                graph.addEdge(new_edge, srcMethod, tgtMethod, true);
                edgeMap.add(new_edge);
            }
            //graph.addEdge(srcMethod + "_" + tgtMethod, srcMethod, tgtMethod, true);
        }

        //File path
        /*String filePath = "pegasus.txt";
        try{
            FileWriter fw = new FileWriter(filePath,true);
            BufferedWriter bw = new BufferedWriter(fw);
            
            Iterator<Edge> edgeIterator = callGraph.iterator();
            for (Node node : graph){
                String label = node.getAttribute("ui.label");
                bw.write(label + "\n");
            }

            bw.close();
        } catch (IOException e) {
            System.err.println("Error writing to the file: " + e.getMessage());
        }*/

        for (Node node : graph) {
            //System.out.println("Node Label: " + node.getId());
            String label = node.getAttribute("ui.label");
            System.out.println(label);
            for (String syscall : syscalls){
                if (label.contains(syscall)){
                    node.setAttribute("ui.class","marked");
                    calls.add(label);
                }
            }
        }

        
        
        try{
            ProcessBuilder processBuilder = new ProcessBuilder("python3", "/home/devuser/cyfi/src/main/java/cfg/frida.py", "AAAAA", "BBBBBBBB", "CCCCCCC");
            Process process = processBuilder.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null){
                System.out.println("Python output: " + line);
            }
            int exitCode = process.waitFor();
            System.out.println("Python exit code: " + exitCode);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
        String stylesheet = 
            "node {text-visibility-mode: hidden;}" +
            "node.marked { text-background-mode: plain; text-size: 14; text-alignment: above; text-visibility-mode: normal; }"+
            "node:clicked {text-visibility-mode: normal;}"
            ;

        //graph.setAttribute("ui.stylesheet", "node { text-background-mode: plain; text-size: 14; text-alignment: above; text-visibility-mode: normal; }");
        //graph.setAttribute("ui.stylesheet", "node {text-visibility-mode: hidden}");
        //graph.setAttribute("ui.stylesheet", "node {text-visibility-mode: hidden;} node.marked { text-background-mode: plain; text-size: 14; text-alignment: above; text-visibility-mode: normal; }");
        graph.setAttribute("ui.stylesheet",stylesheet);
        //graph.setAttribute("ui.stylesheet", "node:selected { text-visibility-mode: normal; }");

        Viewer viewer = graph.display();
        View view = viewer.getDefaultView();
    }
}
